# -*- coding: utf-8 -*-
"""copper molding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i5ceglZnOUaThq9R2DRkrRPT8Nygxodf

**copper moldeing project**
"""

!pip install -q streamlit

import streamlit as st
import pandas as pd

df=pd.read_csv(r"/content/Copper_Set.xlsx - Result 1.csv")
df.head(5)

df.info()

df['item_date']=pd.to_datetime(df['item_date'],format='%Y%m%d',errors='coerce').dt.date
df['delivery date']=pd.to_datetime(df['delivery date'],format='%Y%m%d',errors='coerce').dt.date
print(df[['item_date']])
print(df[['delivery date']])

#convert into correct format
#df['quantity tons']=pd.to_numeric(df['quantity tons'])
df['material_ref']=df['material_ref'].str.lstrip('0')
df[ 'product_ref']=pd.to_numeric(df[ 'product_ref'])
df[ 'width']=pd.to_numeric(df['width'])
df['selling_price']=pd.to_numeric(df['selling_price'])

print(len(df["country"].unique()))
print(len(df["item type"].unique()))
print(len(df["application"].unique()))
print(len(df["product_ref"].unique()))
print(len(df["material_ref"].unique()))

df.shape

#missing value
x=df.isnull().sum()
print(x)

#true and false
df.isnull()

df[df["item_date"].isnull()==True]

#remove NaN values tranfore in "0000"
df['item_date'].fillna("0000-00-00", inplace=True)
df
df['id'].fillna("0000", inplace=True)
df
df['customer'].fillna("00.00", inplace=True)
df
df['country'].fillna("00", inplace=True)
df
df['status'].fillna("Won", inplace=True)
df
df['item type'].fillna("s", inplace=True)
df
df['application'].fillna("00.0", inplace=True)
df
df['thickness'].fillna("0.0", inplace=True)
df
df['width'].fillna("0000.0", inplace=True)
df
df['product_ref'].fillna("00000.0", inplace=True)
df
df['delivery date'].fillna("0000-00-00", inplace=True)
df
df['selling_price'].fillna("0000.0", inplace=True)
df

df['material_ref'].fillna("000", inplace=True)
df

a=df.dropna()
df

#remove the null values
a=df.dropna(inplace=True)
df

print(df.columns)

#removing dublicate values
print(df.duplicated())

#correlation
df.corr()

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import missingno as msno
import datetime as dt
import scipy.stats as st

#visualize the missingness
msno.matrix(df)
plt.show()

#plotting
sns.distplot(df['application'])
plt.show()
sns.distplot(df[ 'customer'])
plt.show()
sns.distplot(df['selling_price'])
plt.show()
sns.distplot(df['thickness'])
plt.show()

x=df[['country', 'status', 'thickness', 'width','customer','product_ref']].corr()
sns.heatmap(x, annot=True, cmap="YlGnBu")



from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor,DecisionTreeClassifier
from sklearn.ensemble import RandomForestRegressor,RandomForestClassifier
from sklearn.model_selection import train_test_split
import sklearn.metrics as sm

#create random data and histogram,
data=np.random.randn(1000)
plt.hist(data,bins=20,color='Red',ec='black')
plt.xlabel("status")
plt.ylabel("selling_price")
plt.show()

#create the scatter plot
plt.scatter(df.application, df.width)

#boxplot
c1=df[df['item type']=="W"]["width"]
c2=df[df['item type']=="WI"]["width"]
c3=df[df['item type']=="S"]["width"]
c4=df[df['item type']=="PL"]["width"]
c5=df[df['item type']=="Others"]["width"]
sns.boxplot(x='item type', y='width',data=df,color='Red')
plt.show()
st.f_oneway(c1,c2,c3,c4,c5)

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import sklearn.metrics as sm
from sklearn.metrics import  r2_score

"""**linear regression**"""

#assin of 2diamomtional array
x=np.array(df["country"]).reshape(-1,1)
y=np.array(df["application"]).reshape(-1,1)
print(x,y)

# devided the date for test and train   (#0.50 mean 50 regards testing and 50 regards traing)
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.1, random_state=50)

#assign of regr for linear regression
regr=LinearRegression()
regr.fit(x,y)

regr=LinearRegression().fit(x,y)

#fit the data for xtrain and y train(x - independent variable, y- depandent variable)
regr.fit(x_train,y_train)
print(regr.score(x_train,y_train))

y_pred=regr.predict(x_test)
plt.scatter(x_test,y_test,color='r')
plt.plot(x_test,y_pred,color='b')
plt.show()

r2 = r2_score(y_test, y_pred)
print(r2)